/*
 * This file was automatically generated by EvoSuite
 * Thu Sep 10 07:27:21 GMT 2020
 */

package com.brmayi.yuna.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.brmayi.yuna.controller.ExceptionController;
import java.io.IOException;
import java.lang.reflect.UndeclaredThrowableException;
import java.net.SocketException;
import java.util.concurrent.TimeoutException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionController_ESTest extends ExceptionController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 5300);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ExceptionController exceptionController0 = new ExceptionController();
      String string0 = exceptionController0.showUnknownHostException();
      assertEquals("ExceptionController\u6D88\u606F: \u5F02\u5E38\u672A\u629B\u51FA", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 8081);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ExceptionController exceptionController0 = new ExceptionController();
      String string0 = exceptionController0.showConnectException();
      assertEquals("ExceptionController\u6D88\u606F: \u5F02\u5E38\u672A\u629B\u51FA", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      exceptionController0.showIllegalArgumentException();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showRethrownException();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.util.concurrent.TimeoutException
         //
         verifyException("com.brmayi.yuna.controller.ExceptionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showErrorThrowable();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // \u4EBA\u5DE5\u629B\u51FA\u4E00\u4E2AError
         //
         verifyException("com.brmayi.yuna.controller.ExceptionController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showUnknownHostException();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2f0f9b06
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showUndeclaredThrowableException();
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showSocketException();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showTimeoutException();
        fail("Expecting exception: TimeoutException");
      
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      String string0 = exceptionController0.showAllThrowable();
      assertEquals("<ul><li>\u5F02\u5E38\u548C\u9519\u8BEF\u57FA\u7C7B</li><ul><li><a href='/errorThrowable'>\u9519\u8BEF</a></li><ul><li>\u865A\u62DF\u673A\u9519\u8BEF</li><ul><li>\u5185\u90E8\u9519\u8BEF</li></ul><li><a href='/threadDeath'>\u7EBF\u7A0B\u6B7B\u6389</a></li></ul></ul><ul>   <li><a href='/rethrown'>\u5F02\u5E38</a></li>   <ul>     <li>\u8FD0\u884C\u65F6\u5F02\u5E38</li><ul><li><a href='/npe'>\u7A7A\u6307\u9488\u5F02\u5E38</a></li><li><a href='/arithmetic'>\u7B97\u6570\u5F02\u5E38</a></li><li><a href='/undeclared'>\u672A\u58F0\u660E\u5F02\u5E38</a></li><li><a href='/illegalArgument'>\u975E\u6CD5\u53C2\u6570\u5F02\u5E38</a></li></ul></ul><ul><li><a href='/io'>\u8F93\u5165\u8F93\u51FA\u5F02\u5E38</a></li><ul><li><a href='/socket'>\u5957\u63A5\u5B57\u5F02\u5E38</a></li><ul><li><a href='/binding'>\u7ED1\u5B9A\u5F02\u5E38</a></li><li><a href='/connect'>\u8FDE\u63A5\u5F02\u5E38</a></li></ul><li><a href='/unknownHost'>\u4E3B\u673A\u540D\u672A\u77E5\u5F02\u5E38</a></li></ul><li><a href='/timeout'>\u8D85\u65F6\u5F02\u5E38</a></li><li>\u53CD\u5C04\u64CD\u4F5C\u5F02\u5E38</li><ul><li><a href='/classNotFound'>\u7C7B\u627E\u4E0D\u5230\u5F02\u5E38</a></li><li>\u88AB\u8C03\u7528\u76EE\u6807\u5F02\u5E38</li><li>\u5B9E\u4F8B\u5316\u5F02\u5E38</li><li>\u975E\u6CD5\u8BBF\u95EE\u5F02\u5E38</li></ul><li>Servlet\u5F02\u5E38</li><ul><li>\u5D4C\u5957Servlet\u5F02\u5E38</li></ul></ul></ul></ul>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showConnectException();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2f10ebc9
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      exceptionController0.showBindingException();
      try { 
        exceptionController0.showBindingException();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showNullPointerException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showClassNotFoundException();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showArithmeticException();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      // Undeclared exception!
      try { 
        exceptionController0.showThreadDeath();
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExceptionController exceptionController0 = new ExceptionController();
      try { 
        exceptionController0.showIOException();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }
}
